on:
  push:
    branches: ['master']
    tags: ['v*.*.*']
  pull_request:
  workflow_dispatch:

env:
  PUSH_IMAGE: ${{ github.event_name != 'pull_request' }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: üîç Checkout
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_KEY }}
          persist-credentials: false
          lfs: true
          submodules: recursive

      - name: üïµÔ∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.REGISTRY }}/${{ secrets.REGISTRY_USER }}/${{ vars.IMAGE_NAME }}
          bake-target: metadata-action
          flavor: |
            latest=auto
            prefix=node${{ vars.NODE_VERSION }}-${{ vars.VARIANT }}-,onlatest=false
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha,prefix=node${{ vars.NODE_VERSION }}-${{ vars.VARIANT }}-,format=short
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}

      - name: üîß Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: üßë‚Äçüíª Log into ${{ vars.REGISTRY }} registry
        if: ${{ fromJson(env.PUSH_IMAGE) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: üìÉ Restore cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: /tmp/container.cache.src
          key: container-${{ vars.VARIANT }}-node${{ vars.NODE_VERSION }}-${{ github.sha }}
          restore-keys: |
            container-${{ vars.VARIANT }}-node${{ vars.NODE_VERSION }}-
            container-${{ vars.VARIANT }}-node
            container-
          enableCrossOsArchive: true
          fail-on-cache-miss: false

      - name: üê≥ Build / Deploy
        uses: docker/bake-action@v4
        with:
          files: |
            docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          set: |
            *.cache-from=type=local,src=/tmp/container.cache.src
            *.cache-to=type=local,mode=max,dest=/tmp/container.cache.dest,compression-level=9
        env:
          PUSH: ${{ fromJson(env.PUSH_IMAGE) }}
          NODE_VERSION: ${{ vars.NODE_VERSION }}
          VARIANT: ${{ vars.VARIANT }}

          # MicroCMS
          MICROCMS_SERVICE_DOMAIN: ${{ secrets.MICROCMS_SERVICE_DOMAIN }}
          MICROCMS_API_KEY: ${{ secrets.MICROCMS_API_KEY }}
          MICROCMS_SECRET: ${{ secrets.MICROCMS_SECRET }}

      - name: üì§ Upload artifact
        if: ${{ ! fromJson(env.PUSH_IMAGE) }}
        uses: actions/upload-artifact@v4
        with:
          name: container.oci
          path: /tmp/container.oci
          if-no-files-found: error
          compression-level: 0

      - name: üíæ Save cache
        uses: actions/cache/save@v4
        with:
          path: /tmp/container.cache.dest
          key: container-${{ vars.VARIANT }}-node${{ vars.NODE_VERSION }}-${{ github.sha }}
